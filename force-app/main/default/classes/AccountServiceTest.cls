/**
 * This class contains unit tests for validating the behavior of Apex classes
 * and triggers.
 *
 * Unit tests are class methods that verify whether a particular piece
 * of code is working properly. Unit test methods take no arguments,
 * commit no data to the database, and are flagged with the testMethod
 * keyword in the method definition.
 *
 * All test methods in an org are executed whenever Apex code is deployed
 * to a production org to confirm correctness, ensure code
 * coverage, and prevent regressions. All Apex classes are
 * required to have at least 75% code coverage in order to be deployed
 * to a production org. In addition, all triggers must have some code coverage.
 * 
 * The @isTest class annotation indicates this class only contains test
 * methods. Classes defined with the @isTest annotation do not count against
 * the org size limit for all Apex scripts.
 *
 * See the Apex Language Reference for more information about Testing and Code Coverage.
 */
@isTest
private class AccountServiceTest {

    @IsTest
    static void should_create_account() {
      String acctName = 'Salesforce';
      String acctNumber = 'SFDC';
      String tickerSymbol = 'CRM';
      Test.startTest();
        AccountService service = new AccountService();
        Account newAcct = service.createAccount( acctName, acctNumber, tickerSymbol );
        insert newAcct;
      Test.stopTest();
      List<Account> accts = [ SELECT Id, Name, AccountNumber, TickerSymbol FROM Account WHERE Id = :newAcct.Id ];
      System.assertEquals( 1, accts.size(), 'should have found new account' );
      System.assertEquals( acctName, accts[0].Name, 'incorrect name' );
      System.assertEquals( acctNumber, accts[0].AccountNumber, 'incorrect account number' );
      System.assertEquals( tickerSymbol, accts[0].TickerSymbol, 'incorrect ticker symbol' );
    }
}